diff --git a/server/main.js b/server/main.js
deleted file mode 100644
index 5982bbe..0000000
--- a/server/main.js
+++ /dev/null
@@ -1,372 +0,0 @@
-const { app, BrowserWindow, ipcMain, dialog } = require('electron');
-const path = require('path');
-const fs = require('fs').promises;
-const express = require('express');
-const os = require('os');
-const config = require('./config');
-
-// Détecter le mode développement
-const isDev = process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';
-console.log('Running in development mode:', isDev);
-
-// Configuration par défaut
-const DEFAULT_CONFIG = {
-    maxFiles: 1000,
-    language: 'fr',
-    mappings: []
-};
-
-// État global
-let mainWindow = null;
-let configWindow = null;
-let mappingWindow = null;
-let currentConfig = { ...DEFAULT_CONFIG };
-let expressApp = null;
-let connectedMobileIP = null;
-let lastPingTime = null;
-let lastPingInterval = null;
-
-// Configuration
-const PING_TIMEOUT = 5000; // 5 secondes pour être plus tolérant
-
-// Initialiser Express
-function createServer() {
-    expressApp = express();
-    
-    // Endpoint de ping pour la découverte et keepalive
-    expressApp.get('/ping', (req, res) => {
-        const clientIP = req.ip;
-        const now = Date.now();
-        console.log(`[Server] Ping from ${clientIP} at ${now}`);
-        
-        // Si c'est un nouveau client ou une reconnexion
-        if (clientIP !== connectedMobileIP) {
-            console.log(`[Server] New mobile connection from ${clientIP}`);
-        }
-        
-        // Mettre à jour l'état de connexion et le timestamp
-        connectedMobileIP = clientIP;
-        lastPingTime = now;
-        
-        // Notifier le frontend
-        if (mainWindow) {
-            mainWindow.webContents.send('mobile-connected', clientIP);
-        }
-        
-        // Répondre avec les infos du serveur pour le mobile
-        res.json({
-            status: 'ok',
-            name: os.hostname(),
-            ip: getLocalIP(),
-            clientIP: clientIP
-        });
-    });
-
-    // Servir les fichiers statiques
-    expressApp.use(express.static(path.join(__dirname, 'public')));
-    
-    // Démarrer le serveur
-    const port = 3000;
-    expressApp.listen(port, () => {
-        console.log(`[Server] Listening on port ${port}`);
-    });
-}
-
-// Vérifier la connexion mobile périodiquement
-function startConnectionCheck() {
-    setInterval(() => {
-        const now = Date.now();
-        if (lastPingTime && connectedMobileIP) {
-            lastPingInterval = now - lastPingTime;
-            // Si le dernier ping est plus vieux que PING_TIMEOUT
-            if (lastPingInterval > PING_TIMEOUT) {
-                console.log(`[Server] Mobile connection timeout - Device: ${connectedMobileIP}, Last ping: ${lastPingTime}, Interval: ${lastPingInterval}ms`);
-                if (mainWindow) {
-                    mainWindow.webContents.send('mobile-disconnected');
-                }
-                connectedMobileIP = null;
-            }
-        }
-    }, 1000); // Vérification toutes les secondes
-}
-
-// Obtenir l'IP locale
-function getLocalIP() {
-    const interfaces = os.networkInterfaces();
-    for (const iface of Object.values(interfaces)) {
-        for (const alias of iface) {
-            if (alias.family === 'IPv4' && !alias.internal) {
-                return alias.address;
-            }
-        }
-    }
-    return '127.0.0.1';
-}
-
-// Gestion des fenêtres
-function createMainWindow() {
-    mainWindow = new BrowserWindow({
-        width: 800,
-        height: 600,
-        webPreferences: {
-            nodeIntegration: false,
-            contextIsolation: true,
-            preload: path.join(__dirname, 'preload.js'),
-            devTools: true // Toujours activer les devtools
-        }
-    });
-
-    // En mode dev, ouvrir les devtools automatiquement
-    if (isDev) {
-        mainWindow.webContents.openDevTools();
-        console.log('DevTools opened in development mode');
-    }
-
-    mainWindow.removeMenu(); // Supprimer le menu
-    mainWindow.loadFile(path.join(__dirname, 'public', 'index.html'));
-}
-
-function createConfigWindow() {
-    if (configWindow) {
-        configWindow.focus();
-        return;
-    }
-
-    configWindow = new BrowserWindow({
-        width: 600,
-        height: 400,
-        parent: mainWindow,
-        modal: true,
-        webPreferences: {
-            nodeIntegration: false,
-            contextIsolation: true,
-            preload: path.join(__dirname, 'preload.js'),
-            devTools: true // Toujours activer les devtools
-        }
-    });
-
-    // En mode dev, ouvrir les devtools automatiquement
-    if (isDev) {
-        configWindow.webContents.openDevTools();
-    }
-
-    configWindow.removeMenu(); // Supprimer le menu
-    configWindow.loadFile(path.join(__dirname, 'public', 'config.html'));
-
-    configWindow.on('closed', () => {
-        configWindow = null;
-    });
-}
-
-function createMappingWindow() {
-    mappingWindow = new BrowserWindow({
-        width: 600,
-        height: 400,
-        webPreferences: {
-            nodeIntegration: false,
-            contextIsolation: true,
-            preload: path.join(__dirname, 'preload.js'),
-            devTools: true // Activer les devtools
-        },
-        parent: mainWindow,
-        modal: true,
-        show: false
-    });
-
-    mappingWindow.loadFile(path.join(__dirname, 'public', 'mapping.html'));
-    mappingWindow.once('ready-to-show', () => {
-        mappingWindow.show();
-        // Ouvrir les devtools en mode dev
-        if (isDev) {
-            mappingWindow.webContents.openDevTools();
-        }
-    });
-}
-
-// Gestion de la configuration
-async function loadConfig() {
-    try {
-        const configPath = path.join(app.getPath('userData'), 'config.json');
-        const data = await fs.readFile(configPath, 'utf8');
-        currentConfig = { ...DEFAULT_CONFIG, ...JSON.parse(data) };
-    } catch (error) {
-        console.log('[Config] Fichier de configuration non trouvé, utilisation des valeurs par défaut');
-        currentConfig = { ...DEFAULT_CONFIG };
-    }
-    return currentConfig;
-}
-
-async function saveConfig(config) {
-    try {
-        const configPath = path.join(app.getPath('userData'), 'config.json');
-        await fs.writeFile(configPath, JSON.stringify(config, null, 2));
-        currentConfig = config;
-        mainWindow.webContents.send('config-updated', config);
-        return true;
-    } catch (error) {
-        console.error('[Config] Erreur lors de la sauvegarde:', error);
-        return false;
-    }
-}
-
-// Gestion des IPC
-function setupIPC() {
-    // Configuration
-    ipcMain.handle('get-config', async () => {
-        return await loadConfig();
-    });
-
-    ipcMain.handle('save-config', async (event, config) => {
-        return await saveConfig(config);
-    });
-
-    ipcMain.handle('get-current-language', async () => {
-        const config = await loadConfig();
-        return config.language || 'fr';
-    });
-
-    ipcMain.handle('set-language', async (event, language) => {
-        const config = await loadConfig();
-        config.language = language;
-        const success = await saveConfig(config);
-        if (success) {
-            mainWindow.webContents.send('language-changed', language);
-        }
-        return success;
-    });
-
-    // Fenêtres
-    ipcMain.on('open-config-window', () => {
-        console.log('[Server] Ouverture fenêtre configuration');
-        if (!configWindow) {
-            createConfigWindow();
-        } else {
-            configWindow.focus();
-        }
-    });
-
-    ipcMain.handle('open-mapping-dialog', () => {
-        createMappingWindow();
-    });
-
-    // Sélection de dossiers
-    ipcMain.handle('select-pc-folder', async (event) => {
-        console.log('[IPC] Selecting PC folder');
-        const result = await dialog.showOpenDialog(BrowserWindow.fromWebContents(event.sender), {
-            properties: ['openDirectory']
-        });
-        
-        if (!result.canceled && result.filePaths.length > 0) {
-            const selectedPath = result.filePaths[0];
-            console.log('[IPC] PC folder selected:', selectedPath);
-            event.sender.send('pc-folder-selected', selectedPath);
-            return selectedPath;
-        }
-        return null;
-    });
-
-    ipcMain.handle('select-mobile-folder', async (event, mappingId) => {
-        console.log('[IPC] Selecting mobile folder');
-        // Pour l'instant, on utilise aussi un sélecteur de dossier local
-        const result = await dialog.showOpenDialog(BrowserWindow.fromWebContents(event.sender), {
-            properties: ['openDirectory']
-        });
-        
-        if (!result.canceled && result.filePaths.length > 0) {
-            const selectedPath = result.filePaths[0];
-            console.log('[IPC] Mobile folder selected:', selectedPath);
-            event.sender.send('mobile-folder-selected', selectedPath);
-            return selectedPath;
-        }
-        return null;
-    });
-
-    ipcMain.handle('save-mapping', async (event, mapping) => {
-        const config = await loadConfig();
-        if (!config.mappings) {
-            config.mappings = [];
-        }
-        config.mappings.push(mapping);
-        return await saveConfig(config);
-    });
-
-    ipcMain.handle('validate-path', async (event, path) => {
-        try {
-            await fs.access(path);
-            return true;
-        } catch {
-            return false;
-        }
-    });
-
-    ipcMain.handle('close-window', (event) => {
-        const win = BrowserWindow.fromWebContents(event.sender);
-        if (win) {
-            win.close();
-        }
-    });
-
-    // Gestion des mappings
-    ipcMain.handle('get-mappings', async () => {
-        const config = await loadConfig();
-        return config.mappings || [];
-    });
-
-    // Gestion des mappings supplémentaires
-    ipcMain.on('add-mapping', () => {
-        const newMapping = {
-            id: Date.now(),
-            title: 'Nouveau mapping',
-            sourcePath: '',
-            destPath: '',
-            progress: 0
-        };
-        mainWindow.webContents.send('mapping-added', newMapping);
-    });
-
-    ipcMain.on('start-copy', (event, mappings) => {
-        console.log('[Server] Démarrage de la copie avec mappings:', mappings);
-        // Simuler la progression pour chaque mapping
-        mappings.forEach(mapping => {
-            let progress = 0;
-            const interval = setInterval(() => {
-                progress += 10;
-                mainWindow.webContents.send('mapping-progress', {
-                    id: mapping.id,
-                    progress: Math.min(progress, 100)
-                });
-                if (progress >= 100) {
-                    clearInterval(interval);
-                }
-            }, 1000);
-        });
-    });
-
-    // Gestion des erreurs
-    ipcMain.on('error', (event, error) => {
-        console.error('[IPC] Erreur reçue:', error);
-        dialog.showErrorBox('Erreur', error.message || 'Une erreur est survenue');
-    });
-}
-
-// Initialisation de l'application
-app.whenReady().then(async () => {
-    await loadConfig();
-    setupIPC();
-    createMainWindow();
-    createServer();
-    startConnectionCheck();
-});
-
-// Quitter quand toutes les fenêtres sont fermées
-app.on('window-all-closed', () => {
-    if (process.platform !== 'darwin') {
-        app.quit();
-    }
-});
-
-app.on('activate', () => {
-    if (BrowserWindow.getAllWindows().length === 0) {
-        createMainWindow();
-    }
-});
diff --git a/server/package.json b/server/package.json
index 5db9701..887ffca 100644
--- a/server/package.json
+++ b/server/package.json
@@ -2,7 +2,7 @@
   "name": "cp2pc-server",
   "version": "1.0.0",
   "description": "Serveur de synchronisation Cp2Pc",
-  "main": "main.js",
+  "main": "src/main.js",
   "scripts": {
     "start": "cross-env NODE_ENV=production electron .",
     "dev": "cross-env NODE_ENV=development electron .",
diff --git a/server/preload.js b/server/preload.js
index 3f736a3..8b7f3e1 100644
--- a/server/preload.js
+++ b/server/preload.js
@@ -70,80 +70,33 @@ contextBridge.exposeInMainWorld('electron', {
 // Exposer les APIs au renderer
 contextBridge.exposeInMainWorld('api', {
     // Configuration
-    getConfig: async () => {
-        return await ipcRenderer.invoke('get-config');
-    },
-    
-    saveConfig: async (config) => {
-        return await ipcRenderer.invoke('save-config', config);
-    },
-
-    closeWindow: async () => {
-        await ipcRenderer.invoke('close-window');
-    },
-
-    // Événements de connexion mobile
-    onMobileConnected: (callback) => {
-        ipcRenderer.on('mobile-connected', callback);
-        return () => ipcRenderer.removeListener('mobile-connected', callback);
-    },
-    
-    onMobileDisconnected: (callback) => {
-        ipcRenderer.on('mobile-disconnected', callback);
-        return () => ipcRenderer.removeListener('mobile-disconnected', callback);
-    },
-
-    // Événements des mappings
-    onMappingAdded: (callback) => {
-        ipcRenderer.on('mapping-added', callback);
-        return () => ipcRenderer.removeListener('mapping-added', callback);
-    },
-    
-    getMappings: async () => {
-        return await ipcRenderer.invoke('get-mappings');
-    },
+    getConfig: () => ipcRenderer.invoke('get-config'),
+    saveConfig: (config) => ipcRenderer.invoke('save-config', config),
+    getCurrentLanguage: () => ipcRenderer.invoke('get-current-language'),
+    setLanguage: (lang) => ipcRenderer.invoke('set-language', lang),
     
-    onMappingProgress: (callback) => {
-        ipcRenderer.on('mapping-progress', callback);
-        return () => ipcRenderer.removeListener('mapping-progress', callback);
-    },
+    // Fenêtres
+    openConfig: () => ipcRenderer.send('open-config-window'),
+    addMapping: () => ipcRenderer.send('add-mapping'),
+    closeWindow: () => ipcRenderer.invoke('close-window'),
     
-    onMappingUpdate: (callback) => {
-        ipcRenderer.on('mapping-update', callback);
-        return () => ipcRenderer.removeListener('mapping-update', callback);
-    },
+    // Sélection de dossiers
+    selectPCFolder: () => ipcRenderer.invoke('select-pc-folder'),
+    selectMobileFolder: () => ipcRenderer.invoke('select-mobile-folder'),
     
-    onMappingDelete: (callback) => {
-        ipcRenderer.on('mapping-delete', callback);
-        return () => ipcRenderer.removeListener('mapping-delete', callback);
-    },
+    // Gestion des mappings
+    getMappings: () => ipcRenderer.invoke('get-mappings'),
+    saveMapping: (mapping) => ipcRenderer.invoke('save-mapping', mapping),
+    validatePath: (path) => ipcRenderer.invoke('validate-path', path),
+    startCopy: () => ipcRenderer.send('start-copy'),
     
-    onFolderSelected: (callback) => {
-        ipcRenderer.on('folder-selected', callback);
-        return () => ipcRenderer.removeListener('folder-selected', callback);
-    },
-
-    // Actions des boutons
-    openConfig: () => {
-        ipcRenderer.send('open-config-window');
-    },
-
-    addMapping: () => {
-        ipcRenderer.invoke('open-mapping-dialog');
-    },
-
-    selectMobileFolder: () => {
-        return ipcRenderer.invoke('select-mobile-folder');
-    },
-
-    selectPCFolder: () => {
-        return ipcRenderer.invoke('select-pc-folder');
-    },
-
-    startCopy: (mappings) => {
-        console.log('[IPC] Demande démarrage copie avec mappings:', mappings);
-        ipcRenderer.send('start-copy', mappings);
-    }
+    // Événements
+    onMobileConnected: (callback) => ipcRenderer.on('mobile-connected', (_, ip) => callback(ip)),
+    onMobileDisconnected: (callback) => ipcRenderer.on('mobile-disconnected', () => callback()),
+    onMappingAdded: (callback) => ipcRenderer.on('mapping-added', () => callback()),
+    onMappingUpdate: (callback) => ipcRenderer.on('mapping-update', (_, mapping) => callback(mapping)),
+    onMappingDelete: (callback) => ipcRenderer.on('mapping-delete', (_, id) => callback(id)),
+    onMappingProgress: (callback) => ipcRenderer.on('mapping-progress', (_, data) => callback(data))
 });
 
 // Initialisation
diff --git a/server/public/js/components/MappingEditor.js b/server/public/js/components/MappingEditor.js
index eabdcdf..e64c588 100644
--- a/server/public/js/components/MappingEditor.js
+++ b/server/public/js/components/MappingEditor.js
@@ -3,12 +3,17 @@ class MappingEditor extends HTMLElement {
     constructor() {
         super();
         this.mapping = null;
-        this.render();
         
         // Lier les méthodes au contexte
         this.handleMobileFolderSelected = this.handleMobileFolderSelected.bind(this);
         this.handlePCFolderSelected = this.handlePCFolderSelected.bind(this);
+        this.handleClose = this.handleClose.bind(this);
+        this.handleCancel = this.handleCancel.bind(this);
+        this.handleSave = this.handleSave.bind(this);
+        this.handleBrowseSource = this.handleBrowseSource.bind(this);
+        this.handleBrowseDest = this.handleBrowseDest.bind(this);
         
+        this.render();
         this.initFolderSelectionHandlers();
         this.addEventListeners();
     }
@@ -38,10 +43,65 @@ class MappingEditor extends HTMLElement {
         }
     }
 
+    handleClose() {
+        this.style.display = 'none';
+    }
+
+    handleCancel() {
+        this.style.display = 'none';
+    }
+
+    handleSave() {
+        const title = this.querySelector('#mappingTitle').value;
+        const sourcePath = this.querySelector('#sourcePath').value;
+        const destPath = this.querySelector('#destPath').value;
+
+        const mappingData = {
+            id: this.mapping ? this.mapping.id : Date.now(),
+            title,
+            sourcePath,
+            destPath
+        };
+
+        if (window.electronAPI) {
+            window.electronAPI.invoke('save-mapping', mappingData)
+                .then(response => {
+                    if (response.success) {
+                        console.log('Mapping sauvegardé avec succès');
+                        this.style.display = 'none';
+                    }
+                })
+                .catch(error => console.error('Erreur lors de la sauvegarde du mapping:', error));
+        }
+    }
+
+    handleBrowseSource() {
+        if (window.electronAPI) {
+            window.electronAPI.invoke('browse-mobile-folder', { mappingId: this.mapping ? this.mapping.id : null })
+                .catch(error => console.error('Erreur lors de la navigation mobile:', error));
+        }
+    }
+
+    handleBrowseDest() {
+        if (window.electronAPI) {
+            window.electronAPI.invoke('select-folder')
+                .then(result => {
+                    if (!result.canceled && result.filePaths.length > 0) {
+                        const input = this.querySelector('#destPath');
+                        if (input) {
+                            input.value = result.filePaths[0];
+                        }
+                    }
+                })
+                .catch(error => console.error('Erreur lors de la sélection du dossier:', error));
+        }
+    }
+
     // Définir le mapping à éditer
     setMapping(mapping) {
         this.mapping = mapping;
         this.render();
+        this.addEventListeners();  // Réattacher les écouteurs après le rendu
     }
 
     render() {
@@ -102,55 +162,36 @@ class MappingEditor extends HTMLElement {
     }
 
     addEventListeners() {
-        // Bouton de fermeture
-        this.querySelector('.close-btn').addEventListener('click', () => {
-            this.dispatchEvent(new CustomEvent('close'));
-        });
-
-        // Bouton d'annulation
-        this.querySelector('.cancel-btn').addEventListener('click', () => {
-            this.dispatchEvent(new CustomEvent('close'));
-        });
-
-        // Bouton de sauvegarde
-        this.querySelector('.save-btn').addEventListener('click', () => {
-            const mappingData = {
-                title: this.querySelector('#mappingTitle').value,
-                sourcePath: this.querySelector('#sourcePath').value,
-                destPath: this.querySelector('#destPath').value
-            };
-
-            if (this.mapping) {
-                mappingData.id = this.mapping.id;
-            }
+        // Supprimer les anciens écouteurs en utilisant les références liées
+        const closeBtn = this.querySelector('.close-btn');
+        const cancelBtn = this.querySelector('.cancel-btn');
+        const saveBtn = this.querySelector('.save-btn');
+        const browseSourceBtn = this.querySelector('#browseSourceBtn');
+        const browseDestBtn = this.querySelector('#browseDestBtn');
 
-            this.dispatchEvent(new CustomEvent('save', {
-                detail: mappingData
-            }));
-        });
-
-        // Boutons de sélection de dossier
-        this.querySelector('#browseSourceBtn').addEventListener('click', async () => {
-            console.log('Clicking browse source button');
-            if (window.api) {
-                try {
-                    await window.api.selectMobileFolder();
-                } catch (error) {
-                    console.error('Error selecting mobile folder:', error);
-                }
-            }
-        });
-
-        this.querySelector('#browseDestBtn').addEventListener('click', async () => {
-            console.log('Clicking browse dest button');
-            if (window.api) {
-                try {
-                    await window.api.selectPCFolder();
-                } catch (error) {
-                    console.error('Error selecting PC folder:', error);
-                }
-            }
-        });
+        // Nettoyer les anciens écouteurs
+        if (closeBtn) {
+            closeBtn.replaceWith(closeBtn.cloneNode(true));
+        }
+        if (cancelBtn) {
+            cancelBtn.replaceWith(cancelBtn.cloneNode(true));
+        }
+        if (saveBtn) {
+            saveBtn.replaceWith(saveBtn.cloneNode(true));
+        }
+        if (browseSourceBtn) {
+            browseSourceBtn.replaceWith(browseSourceBtn.cloneNode(true));
+        }
+        if (browseDestBtn) {
+            browseDestBtn.replaceWith(browseDestBtn.cloneNode(true));
+        }
+
+        // Ajouter les nouveaux écouteurs
+        this.querySelector('.close-btn').addEventListener('click', this.handleClose);
+        this.querySelector('.cancel-btn').addEventListener('click', this.handleCancel);
+        this.querySelector('.save-btn').addEventListener('click', this.handleSave);
+        this.querySelector('#browseSourceBtn').addEventListener('click', this.handleBrowseSource);
+        this.querySelector('#browseDestBtn').addEventListener('click', this.handleBrowseDest);
     }
 
     // Nettoyer les écouteurs quand le composant est détruit
diff --git a/server/public/js/components/MappingList.js b/server/public/js/components/MappingList.js
index 4e0ccd6..1e908d2 100644
--- a/server/public/js/components/MappingList.js
+++ b/server/public/js/components/MappingList.js
@@ -84,34 +84,45 @@ class MappingList extends HTMLElement {
     addEventListeners() {
         // Bouton de copie globale
         this.querySelector('.start-copy-btn').addEventListener('click', () => {
-            if (window.api) {
-                window.api.startCopy();
+            if (window.electronAPI) {
+                window.electronAPI.invoke('start-copy')
+                    .catch(error => console.error('Erreur lors du démarrage de la copie:', error));
             }
         });
 
         // Bouton d'ajout de mapping
         this.querySelector('.add-mapping-btn').addEventListener('click', () => {
-            if (window.api) {
-                window.api.addMapping();
+            if (window.electronAPI) {
+                window.electronAPI.invoke('add-mapping')
+                    .then(response => {
+                        if (response.success) {
+                            console.log('Mapping ajouté avec succès');
+                        }
+                    })
+                    .catch(error => console.error('Erreur lors de l\'ajout du mapping:', error));
             }
         });
 
         // Ajouter les écouteurs pour chaque mapping
         this.querySelector('.mappings-list').addEventListener('click', (e) => {
             const target = e.target.closest('[data-action]');
-            if (target) {
-                const action = target.dataset.action;
-                const id = parseInt(target.closest('.mapping-item').dataset.id);
+            if (!target) return;
 
-                if (action === 'edit') {
-                    if (window.api) {
-                        const mapping = this.mappings.find(m => m.id === id);
-                        this.dispatchEvent(new CustomEvent('edit', { detail: mapping }));
-                    }
-                } else if (action === 'delete') {
-                    if (window.api) {
-                        window.api.deleteMapping(id);
-                    }
+            const mappingItem = target.closest('.mapping-item');
+            if (!mappingItem) return;
+
+            const mappingId = mappingItem.dataset.id;
+            const action = target.dataset.action;
+
+            if (action === 'edit') {
+                if (window.electronAPI) {
+                    window.electronAPI.invoke('edit-mapping', { id: mappingId })
+                        .catch(error => console.error('Erreur lors de l\'édition du mapping:', error));
+                }
+            } else if (action === 'delete') {
+                if (window.electronAPI) {
+                    window.electronAPI.invoke('delete-mapping', { id: mappingId })
+                        .catch(error => console.error('Erreur lors de la suppression du mapping:', error));
                 }
             }
         });
diff --git a/server/public/js/components/NoMappingView.js b/server/public/js/components/NoMappingView.js
index 765532d..57619fb 100644
--- a/server/public/js/components/NoMappingView.js
+++ b/server/public/js/components/NoMappingView.js
@@ -18,9 +18,34 @@ class NoMappingView extends HTMLElement {
         `;
 
         // Ajouter l'écouteur d'événement
-        this.querySelector('#firstMappingBtn').addEventListener('click', () => {
-            if (window.api) {
-                window.api.addMapping();
+        this.querySelector('#firstMappingBtn').addEventListener('click', async () => {
+            if (window.electronAPI) {
+                try {
+                    const response = await window.electronAPI.invoke('add-mapping');
+                    if (response.success) {
+                        // Créer et ajouter l'éditeur de mapping s'il n'existe pas déjà
+                        let mappingEditor = document.querySelector('mapping-editor');
+                        if (!mappingEditor) {
+                            mappingEditor = document.createElement('mapping-editor');
+                            mappingEditor.id = 'mappingEditor';
+                            document.querySelector('.container').appendChild(mappingEditor);
+                        }
+                        
+                        // Créer un nouveau mapping vide
+                        const newMapping = {
+                            id: Date.now(),
+                            title: 'Nouveau mapping',
+                            sourcePath: '',
+                            destPath: ''
+                        };
+                        
+                        // Initialiser l'éditeur avec le nouveau mapping
+                        mappingEditor.setMapping(newMapping);
+                        mappingEditor.style.display = 'block';
+                    }
+                } catch (error) {
+                    console.error('Erreur lors de l\'ajout du mapping:', error);
+                }
             }
         });
     }
diff --git a/server/public/js/main.js b/server/public/js/main.js
index 419ae2e..fe84900 100644
--- a/server/public/js/main.js
+++ b/server/public/js/main.js
@@ -12,7 +12,6 @@ const statusText = document.getElementById('statusText');
 const configBtn = document.getElementById('configBtn');
 const noMappingState = document.getElementById('noMappingState');
 const withMappingsState = document.getElementById('withMappingsState');
-const mappingEditor = document.getElementById('mappingEditor');
 
 // Mettre à jour l'interface utilisateur
 function updateUI() {
@@ -32,22 +31,30 @@ function updateUI() {
     } else {
         noMappingState.style.display = 'none';
         withMappingsState.style.display = 'block';
+        // Utiliser la méthode updateMappings du composant MappingList
         withMappingsState.updateMappings(appState.mappings);
     }
 }
 
 // Créer un nouveau mapping
-function createMapping() {
-    const mapping = {
-        id: appState.nextMappingId++,
-        title: 'Nouveau mapping',
-        sourcePath: '',
-        destPath: '',
-        progress: 0
-    };
-    appState.mappings.push(mapping);
-    updateUI();
-    return mapping;
+async function createMapping() {
+    try {
+        const response = await window.electronAPI.invoke('add-mapping');
+        if (response.success) {
+            const mapping = {
+                id: Date.now(), // Utiliser timestamp comme ID
+                title: 'Nouveau mapping',
+                sourcePath: '',
+                destPath: '',
+                progress: 0
+            };
+            appState.mappings.push(mapping);
+            updateUI();
+            return mapping;
+        }
+    } catch (error) {
+        console.error('Erreur lors de la création du mapping:', error);
+    }
 }
 
 // Supprimer un mapping
@@ -65,7 +72,7 @@ function updateMapping(mappingData) {
     if (index !== -1) {
         appState.mappings[index] = { ...appState.mappings[index], ...mappingData };
     } else {
-        appState.mappings.push({ ...mappingData, id: appState.nextMappingId++, progress: 0 });
+        appState.mappings.push(mappingData);
     }
     updateUI();
 }
@@ -75,78 +82,64 @@ function updateMappingProgress(id, progress) {
     const mapping = appState.mappings.find(m => m.id === id);
     if (mapping) {
         mapping.progress = progress;
-        withMappingsState.updateMappings(appState.mappings);
+        updateUI();
     }
 }
 
-// Gérer l'ouverture de l'éditeur de mapping
-function openMappingEditor(mapping = null) {
-    mappingEditor.style.display = 'block';
-    mappingEditor.setMapping(mapping);
-}
-
 // Initialisation des événements
 document.addEventListener('DOMContentLoaded', () => {
-    // Événements de l'éditeur de mapping
-    mappingEditor.addEventListener('save', (e) => {
-        updateMapping(e.detail);
-        mappingEditor.style.display = 'none';
-    });
-
-    mappingEditor.addEventListener('close', () => {
-        mappingEditor.style.display = 'none';
-    });
-
-    // Événement du bouton de configuration
+    // Écouter l'événement du bouton de configuration
     configBtn.addEventListener('click', () => {
-        if (window.api) {
-            window.api.openConfig();
-        }
+        window.electronAPI.invoke('open-settings-dialog')
+            .catch(error => console.error('Erreur lors de l\'ouverture des paramètres:', error));
     });
 
-    // Cacher l'éditeur par défaut
-    mappingEditor.style.display = 'none';
+    // Vérifier l'état de la connexion mobile
+    window.electronAPI.invoke('get-mobile-status')
+        .then(status => {
+            appState.connected = status.connected;
+            updateUI();
+        })
+        .catch(error => console.error('Erreur lors de la vérification du statut mobile:', error));
 
     // Charger les mappings existants
-    if (window.api) {
-        window.api.getMappings().then(mappings => {
-            appState.mappings = mappings;
-            appState.nextMappingId = Math.max(...mappings.map(m => m.id), 0) + 1;
+    window.electronAPI.invoke('get-mappings')
+        .then(mappings => {
+            appState.mappings = mappings || [];
             updateUI();
-        });
-    }
+        })
+        .catch(error => console.error('Erreur lors du chargement des mappings:', error));
 });
 
 // Gestion des événements IPC avec Electron
-if (window.api) {
+if (window.electronAPI) {
     // Événements de connexion
-    window.api.onMobileConnected((ip) => {
+    window.electronAPI.on('mobile-connected', (ip) => {
         appState.connected = true;
         appState.mobileIP = ip;
         updateUI();
     });
 
-    window.api.onMobileDisconnected(() => {
+    window.electronAPI.on('mobile-disconnected', () => {
         appState.connected = false;
         appState.mobileIP = null;
         updateUI();
     });
 
     // Événements de mapping
-    window.api.onMappingAdded(() => {
-        const newMapping = createMapping();
-        openMappingEditor(newMapping);
+    window.electronAPI.on('mapping-added', () => {
+        // Ne rien faire ici, le mapping sera géré par l'interface utilisateur
     });
 
-    window.api.onMappingUpdate((mapping) => {
+    window.electronAPI.on('mapping-update', (mapping) => {
         updateMapping(mapping);
     });
 
-    window.api.onMappingDelete((id) => {
+    window.electronAPI.on('mapping-delete', (id) => {
         deleteMapping(id);
     });
 
-    window.api.onMappingProgress((data) => {
+    window.electronAPI.on('mapping-progress', (data) => {
         updateMappingProgress(data.id, data.progress);
     });
 }
diff --git a/server/public/js/mapping.js b/server/public/js/mapping.js
index 0e59fb1..8018abc 100644
--- a/server/public/js/mapping.js
+++ b/server/public/js/mapping.js
@@ -5,7 +5,8 @@ class MappingUI {
             id: Date.now(),
             title: 'Nouveau mapping',
             sourcePath: '',
-            destPath: ''
+            destPath: '',
+            progress: 0
         };
         this.initUI();
     }
@@ -15,11 +16,20 @@ class MappingUI {
         
         // Initialiser les champs
         const titleInput = document.getElementById('mappingTitle');
-        if (!titleInput) {
-            console.error('Title input not found');
+        const sourceInput = document.getElementById('sourcePath');
+        const destInput = document.getElementById('destPath');
+
+        if (!titleInput || !sourceInput || !destInput) {
+            console.error('Required inputs not found');
             return;
         }
+
+        // Initialiser les valeurs
         titleInput.value = this.mapping.title;
+        sourceInput.value = this.mapping.sourcePath;
+        destInput.value = this.mapping.destPath;
+
+        // Écouteur pour le titre
         titleInput.addEventListener('input', (e) => {
             this.mapping.title = e.target.value;
         });
@@ -34,7 +44,10 @@ class MappingUI {
             console.log('Clicking browse source button');
             if (window.api) {
                 try {
-                    await window.api.selectMobileFolder();
+                    const selectedPath = await window.api.selectMobileFolder();
+                    if (selectedPath) {
+                        this.handleMobileFolderSelected(selectedPath);
+                    }
                 } catch (error) {
                     console.error('Error selecting mobile folder:', error);
                 }
@@ -50,7 +63,10 @@ class MappingUI {
             console.log('Clicking browse dest button');
             if (window.api) {
                 try {
-                    await window.api.selectPCFolder();
+                    const selectedPath = await window.api.selectPCFolder();
+                    if (selectedPath) {
+                        this.handlePCFolderSelected(selectedPath);
+                    }
                 } catch (error) {
                     console.error('Error selecting PC folder:', error);
                 }
@@ -70,43 +86,40 @@ class MappingUI {
             console.error('Cancel button not found');
             return;
         }
-        cancelBtn.addEventListener('click', () => {
+        cancelBtn.addEventListener('click', async () => {
+            console.log('Closing window...');
             if (window.api) {
-                window.api.closeWindow();
+                try {
+                    const closed = await window.api.closeWindow();
+                    if (!closed) {
+                        console.error('Failed to close window');
+                    }
+                } catch (error) {
+                    console.error('Error closing window:', error);
+                }
             }
         });
-
-        // Écouter les événements de sélection de dossier
-        this.handleMobileFolderSelected = this.handleMobileFolderSelected.bind(this);
-        this.handlePCFolderSelected = this.handlePCFolderSelected.bind(this);
-
-        window.addEventListener('mobile-folder-selected', this.handleMobileFolderSelected);
-        window.addEventListener('pc-folder-selected', this.handlePCFolderSelected);
     }
 
-    handleMobileFolderSelected(event) {
-        console.log('Mobile folder selected:', event.detail);
-        if (event.detail) {
-            this.mapping.sourcePath = event.detail;
-            const input = document.getElementById('sourcePath');
-            if (input) {
-                input.value = event.detail;
-            } else {
-                console.error('Source path input not found');
-            }
+    handleMobileFolderSelected(path) {
+        console.log('Mobile folder selected:', path);
+        this.mapping.sourcePath = path;
+        const input = document.getElementById('sourcePath');
+        if (input) {
+            input.value = path;
+        } else {
+            console.error('Source path input not found');
         }
     }
 
-    handlePCFolderSelected(event) {
-        console.log('PC folder selected:', event.detail);
-        if (event.detail) {
-            this.mapping.destPath = event.detail;
-            const input = document.getElementById('destPath');
-            if (input) {
-                input.value = event.detail;
-            } else {
-                console.error('Dest path input not found');
-            }
+    handlePCFolderSelected(path) {
+        console.log('PC folder selected:', path);
+        this.mapping.destPath = path;
+        const input = document.getElementById('destPath');
+        if (input) {
+            input.value = path;
+        } else {
+            console.error('Dest path input not found');
         }
     }
 
@@ -133,6 +146,12 @@ class MappingUI {
 
 // Initialisation
 document.addEventListener('DOMContentLoaded', () => {
-    console.log('DOM loaded, creating MappingUI');
-    window.mappingUI = new MappingUI();
+    console.log('DOM loaded');
+    // Ne créer l'interface que si on est dans la fenêtre de mapping
+    if (document.querySelector('.mapping-dialog')) {
+        console.log('Creating MappingUI');
+        window.mappingUI = new MappingUI();
+    } else {
+        console.log('Not in mapping window');
+    }
 });
diff --git a/server/public/renderer.js b/server/public/renderer.js
deleted file mode 100644
index fe6d649..0000000
--- a/server/public/renderer.js
+++ /dev/null
@@ -1,396 +0,0 @@
-const { ipcRenderer } = require('electron');
-const { io } = require('socket.io-client');
-
-// Création de la connexion Socket.IO
-const socket = io('http://localhost:3000', {
-    transports: ['websocket', 'polling']
-});
-
-// État de l'application
-let mappings = [];
-let pcStatus = false;
-let mobileStatus = false;
-
-// Éléments DOM
-const pcStatusIndicator = document.getElementById('pc-status');
-const mobileStatusIndicator = document.getElementById('mobile-status');
-const addMappingButton = document.getElementById('add-mapping');
-const showLogsButton = document.getElementById('show-logs');
-const showSettingsButton = document.getElementById('show-settings');
-const startCopyButton = document.getElementById('start-copy');
-const maxFilesInput = document.getElementById('max-files');
-const mappingsContainer = document.getElementById('mappings-container');
-const logsModal = document.getElementById('logs-modal');
-const settingsModal = document.getElementById('settings-modal');
-const closeModalButton = document.querySelector('.close-modal');
-const closeSettingsModalButton = document.querySelector('.close-settings-modal');
-const saveSettingsButton = document.getElementById('save-settings');
-const logsContainer = document.getElementById('logs-container');
-
-// Template pour les mappings
-const mappingTemplate = document.getElementById('mapping-template');
-
-// Configuration
-let config = {
-    maxFiles: 100
-};
-
-// Charger la configuration
-function loadConfig() {
-    const savedConfig = localStorage.getItem('config');
-    if (savedConfig) {
-        config = JSON.parse(savedConfig);
-        maxFilesInput.value = config.maxFiles;
-    }
-}
-
-// Sauvegarder la configuration
-function saveConfig() {
-    config.maxFiles = parseInt(maxFilesInput.value, 10);
-    localStorage.setItem('config', JSON.stringify(config));
-    settingsModal.classList.remove('show');
-}
-
-// Gestionnaires d'événements
-addMappingButton.addEventListener('click', () => {
-    addNewMapping();
-});
-
-showLogsButton.addEventListener('click', () => {
-    logsModal.classList.add('show');
-    socket.emit('get-logs');
-});
-
-showSettingsButton.addEventListener('click', () => {
-    settingsModal.classList.add('show');
-});
-
-startCopyButton.addEventListener('click', () => {
-    startCopy();
-});
-
-closeModalButton.addEventListener('click', () => {
-    logsModal.classList.remove('show');
-});
-
-closeSettingsModalButton.addEventListener('click', () => {
-    settingsModal.classList.remove('show');
-});
-
-saveSettingsButton.addEventListener('click', () => {
-    saveConfig();
-});
-
-// Fermer les modales en cliquant en dehors
-window.addEventListener('click', (event) => {
-    if (event.target === logsModal) {
-        logsModal.classList.remove('show');
-    }
-    if (event.target === settingsModal) {
-        settingsModal.classList.remove('show');
-    }
-});
-
-// Fonctions de gestion des mappings
-function addNewMapping() {
-    const mappingNode = document.importNode(mappingTemplate.content, true);
-    const mappingItem = mappingNode.querySelector('.mapping-item');
-    const mappingId = Date.now().toString();
-    mappingItem.dataset.id = mappingId;
-
-    // Configurer les gestionnaires d'événements pour ce mapping
-    setupMappingEventListeners(mappingItem);
-
-    mappingsContainer.appendChild(mappingItem);
-    mappings.push({
-        id: mappingId,
-        title: '',
-        sourceFolder: '',
-        destFolder: '',
-        progress: 0
-    });
-    updateCopyButtonState();
-}
-
-function setupMappingEventListeners(mappingItem) {
-    const mappingId = mappingItem.dataset.id;
-    const titleInput = mappingItem.querySelector('.mapping-title');
-    const deleteButton = mappingItem.querySelector('.delete-mapping');
-    const editButton = mappingItem.querySelector('.edit-mapping');
-    const browseSourceButton = mappingItem.querySelector('.browse-source');
-    const browseDestButton = mappingItem.querySelector('.browse-dest');
-
-    titleInput.addEventListener('change', (e) => {
-        updateMapping(mappingId, { title: e.target.value });
-    });
-
-    deleteButton.addEventListener('click', () => {
-        deleteMapping(mappingId);
-    });
-
-    editButton.addEventListener('click', () => {
-        toggleMappingEdit(mappingId);
-    });
-
-    browseSourceButton.addEventListener('click', () => {
-        browseFolder(mappingId, 'source');
-    });
-
-    browseDestButton.addEventListener('click', () => {
-        browseFolder(mappingId, 'dest');
-    });
-}
-
-function updateMapping(id, updates) {
-    const index = mappings.findIndex(m => m.id === id);
-    if (index !== -1) {
-        mappings[index] = { ...mappings[index], ...updates };
-        saveMappings();
-    }
-}
-
-function deleteMapping(id) {
-    const index = mappings.findIndex(m => m.id === id);
-    if (index !== -1) {
-        mappings.splice(index, 1);
-        const mappingElement = document.querySelector(`.mapping-item[data-id="${id}"]`);
-        if (mappingElement) {
-            mappingElement.remove();
-        }
-        saveMappings();
-        updateCopyButtonState();
-    }
-}
-
-function toggleMappingEdit(id) {
-    const mappingElement = document.querySelector(`.mapping-item[data-id="${id}"]`);
-    if (mappingElement) {
-        mappingElement.classList.toggle('editing');
-    }
-}
-
-async function browseFolder(mappingId, type) {
-    try {
-        const result = await ipcRenderer.invoke('select-folder');
-        if (result.canceled) return;
-
-        const folderPath = result.filePaths[0];
-        const mapping = mappings.find(m => m.id === mappingId);
-        if (mapping) {
-            const updates = type === 'source' 
-                ? { sourceFolder: folderPath }
-                : { destFolder: folderPath };
-            
-            updateMapping(mappingId, updates);
-            
-            const input = document.querySelector(`.mapping-item[data-id="${mappingId}"] .${type}-folder`);
-            if (input) {
-                input.value = folderPath;
-            }
-            updateCopyButtonState();
-        }
-    } catch (error) {
-        console.error('Erreur lors de la sélection du dossier:', error);
-    }
-}
-
-// Fonctions de gestion des transferts
-function startCopy() {
-    const validMappings = mappings.filter(m => m.sourceFolder && m.destFolder);
-    if (validMappings.length === 0) {
-        alert('Veuillez configurer au moins un mapping valide avant de démarrer la copie.');
-        return;
-    }
-
-    const copyConfig = {
-        mappings: validMappings,
-        maxFiles: config.maxFiles
-    };
-
-    socket.emit('start-copy', copyConfig);
-}
-
-// Gestion des logs
-function appendLog(log) {
-    const logEntry = document.createElement('div');
-    logEntry.textContent = `${new Date(log.timestamp).toLocaleString()} - ${log.message}`;
-    logEntry.className = `log-entry ${log.level}`;
-    logsContainer.appendChild(logEntry);
-    logsContainer.scrollTop = logsContainer.scrollHeight;
-}
-
-// Gestion de la connexion Socket.IO
-socket.on('connect', () => {
-    pcStatus = true;
-    updateStatusIndicators();
-});
-
-socket.on('disconnect', () => {
-    pcStatus = false;
-    updateStatusIndicators();
-});
-
-socket.on('mobile-status', (status) => {
-    mobileStatus = status;
-    updateStatusIndicators();
-});
-
-socket.on('copy-progress', (data) => {
-    updateMappingProgress(data.mappingId, data.progress);
-});
-
-socket.on('log-entry', (log) => {
-    appendLog(log);
-});
-
-socket.on('logs-history', (logs) => {
-    logsContainer.innerHTML = '';
-    logs.forEach(log => appendLog(log));
-});
-
-// Fonctions utilitaires
-function updateStatusIndicators() {
-    pcStatusIndicator.className = `fas fa-circle ${pcStatus ? 'connected' : 'disconnected'}`;
-    mobileStatusIndicator.className = `fas fa-circle ${mobileStatus ? 'connected' : 'disconnected'}`;
-}
-
-function updateMappingProgress(id, progress) {
-    const mappingElement = document.querySelector(`.mapping-item[data-id="${id}"]`);
-    if (mappingElement) {
-        const progressBar = mappingElement.querySelector('.progress');
-        const progressText = mappingElement.querySelector('.progress-text');
-        
-        progressBar.style.width = `${progress}%`;
-        progressText.textContent = `${progress}%`;
-        
-        updateMapping(id, { progress });
-    }
-}
-
-function saveMappings() {
-    localStorage.setItem('mappings', JSON.stringify(mappings));
-}
-
-function loadMappings() {
-    const savedMappings = localStorage.getItem('mappings');
-    if (savedMappings) {
-        mappings = JSON.parse(savedMappings);
-        mappings.forEach(mapping => {
-            const mappingNode = document.importNode(mappingTemplate.content, true);
-            const mappingItem = mappingNode.querySelector('.mapping-item');
-            mappingItem.dataset.id = mapping.id;
-            
-            const titleInput = mappingItem.querySelector('.mapping-title');
-            const sourceInput = mappingItem.querySelector('.source-folder');
-            const destInput = mappingItem.querySelector('.dest-folder');
-            const progressBar = mappingItem.querySelector('.progress');
-            const progressText = mappingItem.querySelector('.progress-text');
-            
-            titleInput.value = mapping.title;
-            sourceInput.value = mapping.sourceFolder;
-            destInput.value = mapping.destFolder;
-            progressBar.style.width = `${mapping.progress}%`;
-            progressText.textContent = `${mapping.progress}%`;
-            
-            setupMappingEventListeners(mappingItem);
-            mappingsContainer.appendChild(mappingItem);
-        });
-    }
-}
-
-function updateCopyButtonState() {
-    const copyButton = document.getElementById('start-copy');
-    const hasValidMappings = mappings.length > 0 && mappings.every(m => m.sourceFolder && m.destFolder);
-    copyButton.disabled = !hasValidMappings;
-}
-
-// Gestion des fichiers mobiles
-let selectedFolder = null;
-let currentMappings = [];
-
-function updateFolderList(folders) {
-    const folderList = document.getElementById('folder-list');
-    folderList.innerHTML = '';
-    
-    // Ajouter les dossiers locaux
-    folders.forEach(folder => {
-        const div = document.createElement('div');
-        div.className = 'folder-item';
-        div.onclick = () => selectFolder(folder);
-        div.innerHTML = `
-            <i class="fas fa-folder"></i>
-            <span>${folder.name}</span>
-        `;
-        folderList.appendChild(div);
-    });
-
-    // Ajouter la section mobile si connecté
-    if (mobileStatus) {
-        const mobileSection = document.createElement('div');
-        mobileSection.className = 'mobile-section';
-        mobileSection.innerHTML = '<h3>Dossiers Mobile</h3>';
-        
-        socket.emit('request-mobile-files');
-    }
-}
-
-function selectMobileFolder(folder) {
-    selectedFolder = {
-        name: folder.name,
-        path: folder.uri,
-        isMobile: true
-    };
-    updateSelectedFolder();
-}
-
-// Mise à jour de la sélection de dossier
-function updateSelectedFolder() {
-    const selectedFolderElement = document.getElementById('selected-folder');
-    if (selectedFolder) {
-        const icon = selectedFolder.isMobile ? 'fa-mobile-alt' : 'fa-folder';
-        selectedFolderElement.innerHTML = `
-            <i class="fas ${icon}"></i>
-            <span>${selectedFolder.name}</span>
-        `;
-    } else {
-        selectedFolderElement.innerHTML = '<span>Aucun dossier sélectionné</span>';
-    }
-}
-
-// Événements Socket.IO pour le mobile
-socket.on('mobile-status', ({ connected }) => {
-    mobileStatus = connected;
-    if (connected) {
-        socket.emit('request-mobile-files');
-    } else {
-        currentMappings = [];
-    }
-    // Mettre à jour la liste des dossiers
-    fetchFolders();
-});
-
-socket.on('update-mobile-files', (files) => {
-    currentMappings = files;
-    // Mettre à jour la liste des dossiers
-    fetchFolders();
-});
-
-// Fonction pour récupérer les dossiers
-async function fetchFolders() {
-    try {
-        const response = await fetch('/folders');
-        const folders = await response.json();
-        updateFolderList(folders);
-    } catch (error) {
-        console.error('Error fetching folders:', error);
-    }
-}
-
-// Initialisation
-document.addEventListener('DOMContentLoaded', () => {
-    loadConfig();
-    loadMappings();
-    updateStatusIndicators();
-    updateCopyButtonState();
-    fetchFolders();
-});
diff --git a/server/server.js b/server/server.js
deleted file mode 100644
index 8047b35..0000000
--- a/server/server.js
+++ /dev/null
@@ -1,488 +0,0 @@
-// Système de logging avec encodage UTF-8
-const log = require('./utils/logger');
-const os = require('os');
-
-const express = require('express');
-const app = express();
-const http = require('http').createServer(app);
-const io = require('socket.io')(http, {
-    cors: {
-        origin: "*",
-        methods: ["GET", "POST"]
-    },
-    pingTimeout: 10000,  // 10 secondes de timeout
-    pingInterval: 5000,  // ping toutes les 5 secondes
-    reconnection: true,
-    reconnectionAttempts: Infinity,
-    reconnectionDelay: 1000,
-    reconnectionDelayMax: 5000
-});
-const path = require('path');
-const { dialog, ipcMain } = require('electron');
-const webdav = require('webdav-server').v2;
-const cors = require('cors');
-
-log.info('🚀 Démarrage du serveur...');
-
-// Obtenir le nom du PC
-const getComputerName = () => {
-    try {
-        return os.hostname();
-    } catch (error) {
-        log.error('Erreur lors de la récupération du nom du PC:', error);
-        return 'PC Inconnu';
-    }
-};
-
-// Obtenir toutes les interfaces réseau IPv4 non-internes
-function getNetworkInterfaces() {
-    const interfaces = os.networkInterfaces();
-    const validInterfaces = [];
-    
-    for (const [name, nets] of Object.entries(interfaces)) {
-        for (const net of nets) {
-            // Uniquement les interfaces IPv4, non-internes, et actives
-            if (net.family === 'IPv4' && !net.internal) {
-                validInterfaces.push({
-                    name,
-                    address: net.address,
-                    netmask: net.netmask,
-                    cidr: net.cidr
-                });
-            }
-        }
-    }
-    
-    return validInterfaces;
-}
-
-// Configuration du serveur WebDAV
-const server = new webdav.WebDAVServer({
-    port: 1900
-});
-server.start();
-log.info('📂 Serveur WebDAV démarré sur le port 1900');
-
-// Variables globales
-let mappings = [];
-let mobileConnected = false;
-let mainWindow;
-let mobileSocket = null;  // Pour stocker la référence au socket mobile
-
-// Configuration CORS
-app.use(cors());
-
-// Route de découverte avec informations réseau
-app.get('/api/discover', (req, res) => {
-    const clientIp = req.ip || req.connection.remoteAddress;
-    log.debug('🔍 Requête de découverte reçue de:', clientIp);
-    
-    const networkInterfaces = getNetworkInterfaces();
-    const computerName = getComputerName();
-    
-    res.json({
-        service: 'cp2pc',
-        version: '1.0.0',
-        features: ['file-sync', 'mobile-connect'],
-        computerName,
-        network: {
-            interfaces: networkInterfaces,
-            clientIp: clientIp
-        }
-    });
-});
-
-// Routes statiques
-app.use(express.static(path.join(__dirname, 'public')));
-log.debug('Dossier statique configuré:', path.join(__dirname, 'public'));
-
-// Configuration des clients
-const clients = {
-    desktop: new Set(),
-    mobile: new Set()
-};
-
-// Middleware pour servir les fichiers statiques
-app.use(express.static(path.join(__dirname, 'public')));
-
-// Middleware pour parser le JSON
-app.use(express.json());
-
-// Route pour obtenir la configuration actuelle
-app.get('/api/config', (req, res) => {
-    res.json({
-        maxFiles: 100,
-        language: 'fr'
-    });
-});
-
-// Route pour mettre à jour la configuration
-app.post('/api/config', (req, res) => {
-    try {
-        const newConfig = req.body;
-        if (newConfig) {
-            // Notifier tous les clients du changement
-            io.emit('config-updated', newConfig);
-            res.json({ success: true, config: newConfig });
-        } else {
-            res.status(400).json({ success: false, error: 'Invalid configuration' });
-        }
-    } catch (error) {
-        res.status(500).json({ success: false, error: error.message });
-    }
-});
-
-// Gestionnaire de Socket.IO
-io.on('connection', (socket) => {
-    console.log('Nouvelle connexion:', socket.id);
-
-    // Identification du type de client
-    socket.on('register', (clientType) => {
-        if (clientType === 'mobile') {
-            clients.mobile.add(socket.id);
-            broadcastMobileStatus(true);
-            console.log('Client mobile enregistré:', socket.id);
-        } else if (clientType === 'desktop') {
-            clients.desktop.add(socket.id);
-            // Envoyer l'état actuel de la connexion mobile
-            socket.emit('mobile-status-update', {
-                connected: clients.mobile.size > 0
-            });
-            console.log('Client desktop enregistré:', socket.id);
-        }
-    });
-
-    // Gestion de la déconnexion
-    socket.on('disconnect', () => {
-        console.log('Client déconnecté:', socket.id);
-        
-        if (clients.mobile.has(socket.id)) {
-            clients.mobile.delete(socket.id);
-            broadcastMobileStatus(false);
-            console.log('Client mobile déconnecté:', socket.id);
-        }
-        
-        if (clients.desktop.has(socket.id)) {
-            clients.desktop.delete(socket.id);
-            console.log('Client desktop déconnecté:', socket.id);
-        }
-    });
-
-    const clientIp = socket.handshake.address;
-    log.info('🔌 Nouvelle connexion socket:', {
-        id: socket.id,
-        address: clientIp
-    });
-
-    // Envoyer l'état initial et les interfaces réseau
-    socket.emit('mobile-status', { 
-        connected: mobileConnected,
-        computerName: getComputerName(),
-        network: getNetworkInterfaces()
-    });
-    socket.emit('init-mappings', mappings);
-    log.debug('📤 État initial envoyé');
-
-    // Gestion de la connexion mobile
-    socket.on('mobile-connect', () => {
-        log.info('📱 Mobile connecté:', socket.id);
-        socket.isMobile = true;
-        mobileConnected = true;
-        
-        // Si un ancien socket mobile existe, le déconnecter
-        if (mobileSocket && mobileSocket.id !== socket.id) {
-            log.debug('📱 Déconnexion de l\'ancien socket mobile:', mobileSocket.id);
-            mobileSocket.disconnect();
-        }
-        
-        mobileSocket = socket;  // Stocker la référence au socket mobile
-        log.debug('📱 Socket mobile enregistré:', socket.id);
-        
-        // Mise en place du keep-alive
-        socket.interval = setInterval(() => {
-            if (socket.connected) {
-                socket.emit('keep-alive');
-                log.debug('💓 Keep-alive envoyé au mobile');
-            }
-        }, 5000);
-        
-        io.emit('mobile-status', { connected: true });
-        // Notifier l'interface Electron
-        if (mainWindow) {
-            mainWindow.webContents.send('mobile-status', { connected: true });
-            log.debug('📤 État mobile envoyé à l\'interface');
-        }
-    });
-
-    // Gestion des mappings
-    socket.on('add-mapping', (mapping) => {
-        log.debug('Nouveau mapping:', mapping);
-        mappings.push(mapping);
-        io.emit('mapping-added', mapping);
-    });
-
-    socket.on('update-mapping', (mapping) => {
-        log.debug('Mise à jour mapping:', mapping);
-        const index = mappings.findIndex(m => m.id === mapping.id);
-        if (index !== -1) {
-            mappings[index] = mapping;
-            io.emit('mapping-updated', mapping);
-        }
-    });
-
-    socket.on('delete-mapping', (id) => {
-        log.debug('Suppression mapping:', id);
-        mappings = mappings.filter(m => m.id !== id);
-        io.emit('mapping-deleted', id);
-    });
-
-    socket.on('browse-folder', async ({ mappingId, type }) => {
-        log.debug('Sélection dossier:', { mappingId, type });
-        try {
-            if (type === 'pc') {
-                const result = await dialog.showOpenDialog({
-                    properties: ['openDirectory']
-                });
-                if (!result.canceled) {
-                    socket.emit('folder-selected', {
-                        mappingId,
-                        type,
-                        path: result.filePaths[0]
-                    });
-                }
-            } else if (type === 'mobile') {
-                log.debug('🔍 Demande de liste des dossiers mobiles pour:', mappingId);
-                // Envoyer la demande à tous les clients (y compris mobile)
-                io.emit('request-mobile-folders', { mappingId });
-            }
-        } catch (error) {
-            log.error('Erreur lors de la sélection du dossier:', error);
-        }
-    });
-
-    // Réception de la liste des dossiers mobiles
-    socket.on('mobile-folders-list', (data) => {
-        log.debug('📂 Liste des dossiers mobiles reçue:', data);
-        if (mainWindow) {
-            mainWindow.webContents.send('show-mobile-folders', {
-                mappingId: data.mappingId,
-                folders: data.folders
-            });
-            log.debug('📤 Liste des dossiers envoyée à l\'interface');
-        }
-    });
-
-    // Confirmation de la sélection d'un dossier mobile
-    socket.on('mobile-folder-selected', (data) => {
-        log.debug('Confirmation de sélection du dossier mobile:', data);
-        // Envoyer la confirmation à l'interface Electron
-        if (mainWindow) {
-            mainWindow.webContents.send('folder-selected', {
-                mappingId: data.mappingId,
-                type: 'mobile',
-                path: data.path
-            });
-        }
-    });
-
-    // Erreur lors de la sélection d'un dossier mobile
-    socket.on('mobile-folder-error', (data) => {
-        log.error('Erreur lors de la sélection du dossier mobile:', data.error);
-        if (mainWindow) {
-            mainWindow.webContents.send('folder-error', {
-                mappingId: data.mappingId,
-                error: data.error
-            });
-        }
-    });
-
-    socket.on('disconnect', () => {
-        if (socket.interval) {
-            clearInterval(socket.interval);
-        }
-
-        if (socket.isMobile) {
-            log.info('📱 Mobile déconnecté:', socket.id);
-            if (mobileSocket && mobileSocket.id === socket.id) {
-                log.debug('📱 Suppression de la référence au socket mobile:', socket.id);
-                mobileSocket = null;
-            }
-            mobileConnected = false;
-            io.emit('mobile-status', { connected: false });
-            if (mainWindow) {
-                mainWindow.webContents.send('mobile-status', { connected: false });
-            }
-
-            // Redémarrer automatiquement le scan après 3 secondes
-            setTimeout(() => {
-                log.debug('🔄 Redémarrage automatique du scan');
-                io.emit('restart-scan');
-            }, 3000);
-        }
-    });
-
-    socket.on('error', (error) => {
-        log.error('❌ Erreur socket:', error);
-        if (socket.isMobile) {
-            log.error('❌ Erreur sur le socket mobile:', socket.id);
-            if (mobileSocket && mobileSocket.id === socket.id) {
-                mobileSocket = null;
-            }
-            mobileConnected = false;
-            io.emit('mobile-status', { connected: false });
-            if (mainWindow) {
-                mainWindow.webContents.send('mobile-status', { connected: false });
-            }
-
-            // Redémarrer automatiquement le scan après 3 secondes
-            setTimeout(() => {
-                log.debug('🔄 Redémarrage automatique du scan');
-                io.emit('restart-scan');
-            }, 3000);
-        }
-    });
-
-    // Gestion du keep-alive
-    socket.on('keep-alive-response', () => {
-        if (socket.isMobile) {
-            log.debug('Keep-alive reçu du mobile');
-        }
-    });
-});
-
-// Fonction pour diffuser l'état de connexion mobile
-function broadcastMobileStatus(connected) {
-    // Envoyer l'état aux clients desktop
-    for (let desktopId of clients.desktop) {
-        io.to(desktopId).emit('mobile-status-update', { connected });
-    }
-}
-
-// Configuration par défaut
-const config = {
-    maxFiles: 100,
-    language: 'fr'
-};
-
-// Mettre à jour la configuration
-function updateConfig(newConfig) {
-    Object.assign(config, newConfig);
-    log.info('Configuration mise à jour:', config);
-    
-    // Notifier tous les clients connectés
-    io.emit('config-updated', {
-        maxFiles: config.maxFiles,
-        language: config.language
-    });
-}
-
-// Configuration des événements IPC
-function setupIPC(mainWindow) {
-    // Vérification de l'état mobile
-    ipcMain.on('check-mobile-status', (event) => {
-        log.debug('📱 Vérification de l\'état mobile');
-        event.reply('mobile-status', { connected: mobileConnected });
-    });
-
-    // Sélection de dossier PC
-    ipcMain.handle('select-folder', async () => {
-        log.debug('📂 Ouverture du sélecteur de dossier PC');
-        const result = await dialog.showOpenDialog(mainWindow, {
-            properties: ['openDirectory']
-        });
-        return result.filePaths[0];
-    });
-
-    // Envoi des événements mobiles
-    ipcMain.on('browse-mobile-folder', (event, data) => {
-        log.debug('📱 Demande de navigation dans les dossiers mobiles:', data);
-        log.debug('📱 État du socket mobile:', mobileSocket ? mobileSocket.id : 'non connecté');
-        
-        if (mobileSocket && mobileSocket.connected) {
-            log.debug('📤 Envoi de la demande au mobile via socket:', mobileSocket.id);
-            mobileSocket.emit('request-mobile-folders', data);
-        } else {
-            log.error('❌ Impossible d\'envoyer la demande : mobile non connecté ou socket invalide');
-            mainWindow.webContents.send('folder-error', {
-                mappingId: data.mappingId,
-                error: 'Mobile non connecté'
-            });
-        }
-    });
-
-    // Sélection d'un dossier mobile
-    ipcMain.on('select-mobile-folder', (event, data) => {
-        log.debug('📱 Sélection d\'un dossier mobile:', data);
-        log.debug('📱 État du socket mobile:', mobileSocket ? mobileSocket.id : 'non connecté');
-        
-        if (mobileSocket && mobileSocket.connected) {
-            log.debug('📤 Envoi de la sélection au mobile via socket:', mobileSocket.id);
-            mobileSocket.emit('select-mobile-folder', data);
-        } else {
-            log.error('❌ Impossible d\'envoyer la sélection : mobile non connecté ou socket invalide');
-            mainWindow.webContents.send('folder-error', {
-                mappingId: data.mappingId,
-                error: 'Mobile non connecté'
-            });
-        }
-    });
-
-    ipcMain.on('update-mappings', (event, newMappings) => {
-        mappings = newMappings;
-        if (mobileSocket) {
-            mobileSocket.emit('update-mappings', mappings);
-        }
-    });
-
-    ipcMain.on('get-mappings', (event) => {
-        event.reply('mappings-updated', mappings);
-    });
-}
-
-// Démarrage du serveur
-function startServer(win) {
-    mainWindow = win;
-    setupIPC(win);
-    
-    const port = 3000;
-    const host = '0.0.0.0';
-
-    try {
-        http.listen(port, host, () => {
-            const computerName = getComputerName();
-            log.info(`🌐 Serveur HTTP démarré sur ${host}:${port}`);
-            log.info(`💻 Nom du PC: ${computerName}`);
-            const interfaces = getNetworkInterfaces();
-            log.info('📡 Interfaces réseau disponibles:', interfaces);
-        });
-
-        io.on('connection', (socket) => {
-            log.info('🔌 Nouvelle connexion Socket.IO:', {
-                id: socket.id,
-                address: socket.handshake.address,
-                query: socket.handshake.query
-            });
-
-            socket.on('error', (error) => {
-                log.error('❌ Erreur Socket.IO:', error);
-            });
-
-            socket.on('disconnect', (reason) => {
-                log.info('🔌 Déconnexion Socket.IO:', {
-                    id: socket.id,
-                    reason: reason
-                });
-            });
-        });
-
-        log.info('✅ Socket.IO initialisé et en écoute');
-    } catch (error) {
-        log.error('❌ Erreur au démarrage du serveur:', error);
-    }
-}
-
-// Exposer les fonctions nécessaires
-module.exports = {
-    start: startServer,
-    updateConfig: updateConfig
-};
diff --git a/server/src/main.js b/server/src/main.js
index 57c4775..ccfc8b0 100644
--- a/server/src/main.js
+++ b/server/src/main.js
@@ -39,34 +39,33 @@ function isWindowValid() {
 
 function createWindow() {
     debugLog('🎨 Création de la fenêtre principale');
-    
+
     // Vérification des chemins critiques
     const preloadPath = path.join(SRC_DIR, 'preload.js');
     const indexPath = path.join(PUBLIC_DIR, 'index.html');
-    
+
     debugLog('📜 Preload:', preloadPath);
     debugLog('📄 Index:', indexPath);
-    
+
     if (!fs.existsSync(preloadPath)) {
         debugLog('❌ Preload script introuvable:', preloadPath);
         app.quit();
         return;
     }
-    
+
     if (!fs.existsSync(indexPath)) {
         debugLog('❌ Index HTML introuvable:', indexPath);
         app.quit();
         return;
     }
-    
+
     mainWindow = new BrowserWindow({
-        width: 1200,
-        height: 800,
+        width: 800,
+        height: 600,
         webPreferences: {
             nodeIntegration: false,
             contextIsolation: true,
-            preload: preloadPath,
-            sandbox: false
+            preload: preloadPath
         }
     });
 
@@ -74,34 +73,35 @@ function createWindow() {
     
     if (process.env.NODE_ENV === 'development') {
         mainWindow.webContents.openDevTools();
-        debugLog('🔧 DevTools ouverts');
     }
-    
-    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
-        debugLog('❌ Erreur de chargement:', errorCode, errorDescription);
-    });
 
-    mainWindow.webContents.on('did-finish-load', () => {
-        debugLog('✅ Chargement terminé');
-    });
-    
-    mainWindow.webContents.on('dom-ready', () => {
-        debugLog('📄 DOM ready');
+    mainWindow.on('closed', () => {
+        mainWindow = null;
     });
 
-    mainWindow.webContents.on('console-message', (event, level, message) => {
-        debugLog('💬 Console:', message);
-    });
-    
     debugLog('✅ Fenêtre principale créée');
 }
 
 function setupIPC() {
     debugLog('🔌 Configuration des événements IPC');
+    debugLog('📡 Enregistrement des gestionnaires d\'événements...');
+
+    // Enregistrement des événements
+    const registeredEvents = [];
+
+    function registerIPCEvent(type, channel) {
+        registeredEvents.push({ type, channel });
+        debugLog(`✅ Événement ${type} enregistré: ${channel}`);
+    }
 
     // Test Echo synchrone
     ipcMain.handle('sync-test-echo', async (event, data) => {
         debugLog('📥 Test echo synchrone reçu:', data);
+        debugLog('🔍 Détails de l\'événement:', {
+            sender: event.sender.id,
+            frameId: event.frameId,
+            data: data
+        });
         
         if (!io) {
             debugLog('❌ Socket.IO non initialisé');
@@ -136,6 +136,97 @@ function setupIPC() {
         }
     });
 
+    registerIPCEvent('handle', 'sync-test-echo');
+
+    // Gestion de l'ajout de mapping
+    ipcMain.handle('add-mapping', async (event) => {
+        debugLog('📂 Demande d\'ajout de mapping reçue');
+        debugLog('🔍 Détails de l\'événement:', {
+            sender: event.sender.id,
+            frameId: event.frameId
+        });
+        
+        // Ne rien faire ici, juste retourner succès
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'add-mapping');
+
+    // Récupération des mappings
+    ipcMain.handle('get-mappings', async () => {
+        debugLog('📂 Demande de récupération des mappings');
+        // Pour l'instant, retourner une liste vide
+        // TODO: Implémenter la persistance des mappings
+        return [];
+    });
+
+    registerIPCEvent('handle', 'get-mappings');
+
+    // Sélection d'un dossier
+    ipcMain.handle('select-folder', async () => {
+        debugLog('📂 Demande de sélection de dossier');
+        if (!mainWindow) {
+            debugLog('❌ Fenêtre principale non disponible');
+            return { canceled: true };
+        }
+
+        const result = await dialog.showOpenDialog(mainWindow, {
+            properties: ['openDirectory']
+        });
+        
+        debugLog('📂 Résultat de la sélection:', result);
+        return result;
+    });
+
+    registerIPCEvent('handle', 'select-folder');
+
+    // Démarrage de la copie
+    ipcMain.handle('start-copy', async () => {
+        debugLog('📤 Démarrage de la copie');
+        // TODO: Implémenter la logique de copie
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'start-copy');
+
+    // Sauvegarde d'un mapping
+    ipcMain.handle('save-mapping', async (event, mappingData) => {
+        debugLog('💾 Sauvegarde du mapping:', mappingData);
+        // TODO: Implémenter la persistance
+        event.sender.send('mapping-update', mappingData);
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'save-mapping');
+
+    // Édition d'un mapping
+    ipcMain.handle('edit-mapping', async (event, { id }) => {
+        debugLog('✏️ Édition du mapping:', id);
+        // TODO: Implémenter la récupération du mapping
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'edit-mapping');
+
+    // Suppression d'un mapping
+    ipcMain.handle('delete-mapping', async (event, { id }) => {
+        debugLog('🗑️ Suppression du mapping:', id);
+        // TODO: Implémenter la suppression
+        event.sender.send('mapping-delete', id);
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'delete-mapping');
+
+    // Navigation dans les dossiers mobiles
+    ipcMain.handle('browse-mobile-folder', async (event, { mappingId }) => {
+        debugLog('📱 Navigation dans les dossiers mobiles pour le mapping:', mappingId);
+        // TODO: Implémenter la navigation mobile
+        return { success: true };
+    });
+
+    registerIPCEvent('handle', 'browse-mobile-folder');
+
     // Récupération de l'état du mobile
     ipcMain.handle('get-mobile-status', async () => {
         debugLog('📱 Demande de l\'état du mobile');
@@ -150,6 +241,8 @@ function setupIPC() {
         return { connected: !!mobileSocket };
     });
 
+    registerIPCEvent('handle', 'get-mobile-status');
+
     // Configuration du mapping
     ipcMain.handle('open-mapping-dialog', async () => {
         debugLog('📂 Ouverture dialogue mapping');
@@ -172,6 +265,8 @@ function setupIPC() {
         }
     });
 
+    registerIPCEvent('handle', 'open-mapping-dialog');
+
     // Configuration des paramètres
     ipcMain.handle('open-settings-dialog', async () => {
         debugLog('⚙️ Ouverture dialogue paramètres');
@@ -253,6 +348,8 @@ function setupIPC() {
         }
     });
 
+    registerIPCEvent('handle', 'open-settings-dialog');
+
     // Gestion de la navigation des dossiers mobiles
     ipcMain.on('browse-mobile-folder', async (event, { mappingId }) => {
         debugLog('📱 Demande de navigation mobile reçue pour le mapping:', mappingId);
@@ -281,44 +378,14 @@ function setupIPC() {
         }
     });
 
-    debugLog('✅ Événements IPC configurés');
-}
+    registerIPCEvent('on', 'browse-mobile-folder');
 
-// Service de découverte réseau
-function setupDiscoveryService(port) {
-    debugLog('🔍 Configuration du service de découverte');
-    
-    // Obtenir toutes les adresses IP locales
-    const nets = networkInterfaces();
-    const results = [];
-    
-    for (const name of Object.keys(nets)) {
-        for (const net of nets[name]) {
-            // Ignorer les adresses non IPv4 et loopback
-            if (net.family === 'IPv4' && !net.internal) {
-                results.push(net.address);
-            }
-        }
-    }
-    
-    debugLog('🌐 Adresses IP locales:', results);
-    
-    // Stocker les informations de découverte
-    const discoveryInfo = {
-        serverPort: port,
-        addresses: results,
-        timestamp: new Date().toISOString()
-    };
-    
-    // Répondre aux requêtes de découverte
-    if (io) {
-        io.on('discovery-request', (socket) => {
-            debugLog('🔍 Requête de découverte reçue');
-            socket.emit('discovery-response', discoveryInfo);
-        });
-    }
+    debugLog('📋 Liste des événements IPC enregistrés:');
+    registeredEvents.forEach(({ type, channel }) => {
+        debugLog(`- ${type}: ${channel}`);
+    });
     
-    debugLog('✅ Service de découverte configuré');
+    debugLog('✅ Configuration IPC terminée');
 }
 
 // Configuration du serveur Express et Socket.IO
@@ -327,12 +394,7 @@ function setupServer() {
     app.use(express.static(PUBLIC_DIR));
     
     server = http.createServer(app);
-    io = new Server(server, {
-        cors: {
-            origin: "*",
-            methods: ["GET", "POST"]
-        }
-    });
+    io = new Server(server);
 
     io.on('connection', (socket) => {
         const clientType = socket.handshake.query.clientType;
@@ -341,36 +403,43 @@ function setupServer() {
         // Si c'est un client mobile
         if (clientType === 'mobile') {
             debugLog('📱 Client mobile connecté');
-            // Notifier tous les clients de la connexion mobile
             io.emit('mobile-status', { connected: true });
         }
         
+        // Découverte du serveur
+        socket.on('discovery-request', () => {
+            debugLog('🔍 Requête de découverte reçue');
+            const discoveryInfo = {
+                serverPort: 3000,
+                addresses: Object.values(networkInterfaces())
+                    .flat()
+                    .filter(net => net.family === 'IPv4' && !net.internal)
+                    .map(net => net.address),
+                timestamp: new Date().toISOString()
+            };
+            socket.emit('discovery-response', discoveryInfo);
+            debugLog('📤 Réponse de découverte envoyée:', discoveryInfo);
+        });
+
         socket.on('disconnect', () => {
             debugLog('🔌 Déconnexion Socket.IO:', { clientType });
-            
-            // Si c'était un client mobile
             if (clientType === 'mobile') {
                 debugLog('📱 Client mobile déconnecté');
-                // Notifier tous les clients de la déconnexion mobile
                 io.emit('mobile-status', { connected: false });
             }
         });
 
-        // Gestion des erreurs de socket
         socket.on('error', (error) => {
             debugLog('❌ Erreur Socket.IO:', error);
-            // Si c'était un client mobile, notifier la déconnexion
             if (clientType === 'mobile') {
                 io.emit('mobile-status', { connected: false });
             }
         });
 
-        // Echo mobile
         socket.on('mobile-echo-response', (data) => {
             debugLog('📱 Réponse echo reçue du mobile:', data);
         });
 
-        // Liste des dossiers mobiles
         socket.on('mobile-folders-list', (data) => {
             debugLog('📂 Liste des dossiers mobiles reçue:', data);
             if (isWindowValid()) {
@@ -381,20 +450,12 @@ function setupServer() {
 
     const port = 3000;
     server.listen(port, () => {
-        console.log('info: Serveur démarré sur le port %d', port, {
-            timestamp: new Date().toISOString()
-        });
+        debugLog('✅ Serveur démarré sur le port', port);
     });
 
-    // Gestion des erreurs du serveur
     server.on('error', (error) => {
         debugLog('❌ Erreur serveur:', error);
     });
-
-    // Service de découverte
-    setupDiscoveryService(port);
-
-    debugLog('🔧 Serveur configuré, Socket.IO initialisé:', !!io);
 }
 
 // Gestion des erreurs globales
diff --git a/server/src/preload.js b/server/src/preload.js
index 95f969e..1b5519c 100644
--- a/server/src/preload.js
+++ b/server/src/preload.js
@@ -15,10 +15,34 @@ const validChannels = {
         'sync-test-echo',
         'get-mobile-status',
         'open-mapping-dialog',
-        'open-settings-dialog'
+        'open-settings-dialog',
+        'add-mapping',
+        'get-mappings',
+        'select-folder',
+        'start-copy',
+        'save-mapping',
+        'edit-mapping',
+        'delete-mapping',
+        'browse-mobile-folder'
     ],
-    on: ['mobile-status'],
-    removeListeners: ['mobile-status']
+    on: [
+        'mobile-status',
+        'mapping-added',
+        'mapping-update',
+        'mapping-delete',
+        'mapping-progress',
+        'mobile-connected',
+        'mobile-disconnected'
+    ],
+    removeListeners: [
+        'mobile-status',
+        'mapping-added',
+        'mapping-update',
+        'mapping-delete',
+        'mapping-progress',
+        'mobile-connected',
+        'mobile-disconnected'
+    ]
 };
 
 try {
@@ -26,26 +50,44 @@ try {
     contextBridge.exposeInMainWorld('electronAPI', {
         // Méthodes IPC
         invoke: (channel, data) => {
-            debugLog('📤 Invoke:', channel, data);
+            debugLog(`📤 Invoke envoyé: ${channel}`, data);
             if (validChannels.invoke.includes(channel)) {
-                return ipcRenderer.invoke(channel, data);
+                return ipcRenderer.invoke(channel, data)
+                    .then(result => {
+                        debugLog(`📥 Réponse reçue pour ${channel}:`, result);
+                        return result;
+                    })
+                    .catch(error => {
+                        debugLog(`❌ Erreur pour ${channel}:`, error);
+                        throw error;
+                    });
             }
+            debugLog(`❌ Canal IPC non autorisé: ${channel}`);
             return Promise.reject(new Error(`Canal IPC non autorisé: ${channel}`));
         },
         
         // Écouteurs d'événements
         on: (channel, callback) => {
-            debugLog('👂 Ajout écouteur:', channel);
+            debugLog(`👂 Ajout écouteur: ${channel}`);
             if (validChannels.on.includes(channel)) {
-                ipcRenderer.on(channel, (event, ...args) => callback(...args));
+                const wrappedCallback = (...args) => {
+                    debugLog(`📥 Événement reçu ${channel}:`, ...args);
+                    callback(...args);
+                };
+                ipcRenderer.on(channel, wrappedCallback);
+            } else {
+                debugLog(`❌ Canal non autorisé pour l'écouteur: ${channel}`);
             }
         },
         
         // Suppression des écouteurs
         removeAllListeners: (channel) => {
-            debugLog('🗑️ Suppression écouteurs:', channel);
+            debugLog(`🗑️ Suppression écouteurs: ${channel}`);
             if (validChannels.removeListeners.includes(channel)) {
                 ipcRenderer.removeAllListeners(channel);
+                debugLog(`✅ Écouteurs supprimés pour: ${channel}`);
+            } else {
+                debugLog(`❌ Canal non autorisé pour la suppression: ${channel}`);
             }
         }
     });
